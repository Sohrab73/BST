/*#include<iostream>
using namespace std;
struct Node* root = NULL;

struct Node {
	struct Node* lchild;
	int data;
	struct Node* rchild;
};
struct Queue {
	int size;
	int front;
	int rear;
	Node** Q; 
		
};
typedef struct Queue queue;
void create(queue * q, int size) {
	q->size = size;
	q->front = q->rear = 0;
	q->Q = new Node* ;

}
void enqueue(queue* q, Node *x) {
	if ((q->rear + 1) % q->size == q->front) {
		cout << "Queue is full" << endl;
	}
	else {
		q->rear = (q->rear + 1) % q->size;
		q->Q[q->rear] = x;
	}
}
Node* dequeue(queue* q) {
	Node* x = NULL;
	if (q->front == q->rear) {
		cout << "Queue empty" << endl;
	}
	else {
		q->front = (q->front + 1) % q->size;
	}
}
int isempty(queue q) {
	return q.front = q.rear;
}
void treecreate() {
	struct Node* p, * t;
	int x;
	struct Queue q;
	create(&q, 100);
	cout << "Enter root: ";
	cin >> x;
	root = new Node;
	root->data = x;
	root->lchild = root->rchild = NULL;
	enqueue(&q, root);
	while (!isempty(q)) {
		p = dequeue(&q);
		cout << "Enter left child of: "<<root->data;
		cin >> x;
		if (x != -1) {
			t = new Node;
			t->data = x;
			t->lchild = t->rchild = NULL;
			p->lchild = t;
			enqueue(&q, t);

		}
		cout << "Enter right child of : "<<root->data;
		cin >> x;
		if (x != -1) {
			t = new Node;
			t->data = x;
			t->lchild = t->rchild = NULL;
			p->rchild = t;
			enqueue(&q, t);

		}
	}

}
void preorder(struct Node* p) {
	if (p) {
		cout << p->data;
		preorder(p ->  lchild);
		preorder(p->rchild);
	}
}
int main() {
	treecreate();
	preorder(root);

	return 0;
}*/
#include<iostream>
using namespace std;
struct node {
	int key;
    node* left, * right;
};
struct node* newNode(int item) {
	node* temp =new node;
	temp->key = item;
	temp->left = temp->right = NULL;
	return temp;
}
void PrintTree(struct node* root) {
	if (root == NULL) { 
		return; 
	}
	cout<< root->key<<" ";
	PrintTree(root->left);
	PrintTree(root->right);
}
void inordertraversal(struct node* root) {
	if (root == NULL) { 
		return;
	}

	inordertraversal(root->left);
	cout<<root->key<<" ";
	inordertraversal(root->right);
}
void preordertraversal(struct node* root) {
	if (root == NULL) {
		return;
	}
	cout << root->key<<" ";
	preordertraversal(root->left);
	preordertraversal(root->right);
}
void postordertraversal(struct node* root) {
	if (root == NULL) {
		return;
	}
	postordertraversal(root->left);
	postordertraversal(root->right);
	cout << root->key<<" ";
}
struct node* insert(struct node* node, int key) {
	if (node == NULL) {
		return newNode(key);
	}
	if (key < node->key) {
		node->left = insert(node->left, key);
	}
	else {
		node->right = insert(node->right, key);
	}
	return node;
}
struct node* minValueNode(struct node* node) {
    struct node* current = node;
	while (current && current->left != NULL) {
		current = current->left;
	}
	return current;
}
struct node* deleteNode(struct node* root, int key) {

	//case 1: No Child
	if (root == NULL) { 
		return root; 
	}
	// find left or right
	if (key < root->key) {
		root->left = deleteNode(root->left, key);
	}
	else if (key > root->key) {
		root->right = deleteNode(root->right, key);
	}
	//case 2:
	else {
		// if only right child present
		if (root->left == NULL) {
			struct node* temp = root->right;
			free(root);
			return temp;
		}
		// if only left child present

		else if (root->right == NULL) {
			struct node* temp = root->left;
			free(root);
			return temp;
		}

		// if two child present
		struct node* temp = minValueNode(root->right);
		root->key = temp->key;
		root->right = deleteNode(root->right, temp->key);
	}
	return root;
}
int main() {
	struct node* root = NULL;
	root = insert(root, 50);
	root = insert(root, 30);
	root = insert(root, 20);
	root = insert(root, 40);
	root = insert(root, 70);
	root = insert(root, 60);
	root = insert(root, 80);
	cout<<"Printing Tree\n ";
	PrintTree(root);
	cout<<"\nInorder traversal of the given tree\n ";
	inordertraversal(root);
	cout<<"\npreorder traversal of the given tree\n ";
	preordertraversal(root);
	cout<<"\npostorder traversal of the given tree \n";
	postordertraversal(root);
	cout<<"\nDelete 20\n";
	root = deleteNode(root, 20);
	cout<<"Inorder traversal of the modified tree \n";
	inordertraversal(root);
	cout<<"\nDelete 30\n";
	root = deleteNode(root, 30);
	cout << "Inorder traversal of the modified tree \n";
	inordertraversal(root);
	printf("\nDelete 50\n");
	root = deleteNode(root, 50);
	cout << "Inorder traversal of the modified tree \n";
	inordertraversal(root);
	return 0;
}



